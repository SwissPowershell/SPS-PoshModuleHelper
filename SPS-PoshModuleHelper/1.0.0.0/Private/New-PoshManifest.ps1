enum PMHPSEditions {
    Desktop
    Core
}
enum PMHProcessArchitecture {
    None
    MSIL
    X86
    X64
    IA64
    Amd64
    Arm
}
Class PMHPSData {
    [String[]] ${Tags}
    [URI] ${LicenseUri}
    [URI] ${ProjectUri}
    [URI] ${IconUri}
    [String] ${ReleaseNotes}
    PMHPSData() {}
    PMHPSData([String[]] ${Tags},[URI] ${LicenseUri},[URI] ${ProjectUri},[URI] ${IconUri}, [String] ${ReleaseNotes}) {
        $This.Tags = $Tags
        $This.LicenseUri = $LicenseUri
        $This.ProjectUri = $ProjectUri
        $This.IconUri = $IconUri
        $This.ReleaseNotes = $ReleaseNotes
    }
    [String] ParamToString ([String] ${Name}) {
        $Value = $This.$Name
        If ($Null -eq $Value) {
            $RetVal = ''
        }Else{
            If ($Value -is [String[]]) {
                if ($Value.Count -gt 0){
                    $RetVal = "$($Name) = $(($Value | ForEach-Object {"'$($_)'"}) -join ',')"
                }Else{
                    $RetVal = ''
                }
            }Elseif ($Value -is [URI]) {
                $RetVal = "$($Name) = $(($Value | Select-Object -ExpandProperty 'AbsoluteUri'))"
            }Else {
                $RetVal = "$($Name) = '$($Value)'"
            }
        }
        Return $RetVal
    }
    [String] ToString() {
        $RetVal = @"
        PSData = @{
            $($This.ParamToString('Tags'))
            $($This.ParamToString('LicenseUri'))
            $($This.ParamToString('ProjectUri'))
            $($This.ParamToString('IconUri'))
            $($This.ParamToString('ReleaseNotes'))
        }
"@
        Return $RetVal
    }
}
Class PoshManifest {
    #[String] ${Path}   
    [String] ${Name}
    [String] ${RootModule}
    [Version] ${ModuleVersion} = [Version]::New('1.0.0.0')
    [GUID] ${Guid} = "$([GUID]::NewGuid())"
    [String] ${Author} = "$($($Env:UserName.Substring(0,1)).ToUpper())$($Env:UserName.Substring(1))"
    [String] ${CompanyName} = "$($($Env:UserName.Substring(0,1)).ToUpper())$($Env:UserName.Substring(1))''s Company"
    [String] ${Copyright} = "(c) $(Get-Date -Format yyyy) $($($Env:UserName.Substring(0,1)).ToUpper())$($Env:UserName.Substring(1))''s Company"
    [String] ${Description}
    [Version] ${PowerShellVersion}
    [Version] ${PowerShellHostVersion}
    [String] ${PowerShellHostName}
    [Version] ${DotNetFrameworkVersion}
    [String] ${CLrVersion}
    [Nullable[PMHProcessArchitecture]] ${ProcessorArchitecture}
    [Object] ${RequiredModules}
    [String[]] ${RequiredAssemblies}
    [String[]] ${ScriptsToProcess}
    [String[]] ${TypeToProcess}
    [String[]] ${FormatToProcess}
    [Object[]] ${NestedModules}
    [String[]] ${FunctionsToExport}
    [String[]] ${CmdletsToExport}
    [String[]] ${VariablesToExport}
    [String[]] ${AliasesToExport}
    [String[]] ${DscRessourcesToExport}
    [Object[]] ${ModuleList}
    [String[]] ${FileList}
    [PMHPSData] ${PrivateData}
    [String] ${HelpInfoUri}
    [String] ${DefaultCommandPrefix}
    [Nullable[PMHPSEditions]] ${CompatiblePSEditions}
    PoshManifest () {}
    PoshManifest ([String] ${Name}) {
        $This.Name = $Name
        $This.RootModule = "$($Name).psm1"
    }
    [String] ToString() {
        $RetVal = @"
# Module manifest for module: '$($This.Name)'
# Generated with: SPS-PoshModuleHelper
# Generated by: $($This.Author)
# Generated on: $(Get-Date -Format 'dd.MM.yyyy')
#
@{
"@
        $AllProperties = @('RootModule','ModuleVersion','Guid','Author','CompanyName','Copyright','Description','PowerShellVersion','PowerShellHostVersion','PowerShellHostName','DotNetFrameworkVersion','CLrVersion','ProcessorArchitecture','RequiredModules','RequiredAssemblies','ScriptsToProcess','TypeToProcess','FormatToProcess','NestedModules','FunctionsToExport','CmdletsToExport','VariablesToExport','AliasesToExport','DscRessourcesToExport','ModuleList','FileList','PrivateData','HelpInfoUri','DefaultCommandPrefix','CompatiblePSEditions')
        ForEach ($Property in $AllProperties) {
            if ($Property -eq 'PrivateData') {
                $AllPrivateDataProperties = @('Tags','LicenseUri','ProjectUri','IconUri','ReleaseNotes')
                $PrivateDataStr = @"
    PrivateData = @{
        PSData = @{
"@
                ForEach($PrivateDataProperty in $AllPrivateDataProperties) {
                    if ($This.PrivateData.$PrivateDataProperty -Notlike $Null) {$PrivateDataStr = "$($PrivateDataStr)`r`n            $($PrivateDataProperty) = $(($This.PrivateData.$PrivateDataProperty | ForEach-Object {"'$_'"}) -join ',')"}    
                }
                $PrivateDataStr = "$($PrivateDataStr)`r`n        }`r`n    }"
                $RetVal = "$($RetVal)`r`n$($PrivateDataStr)"
            }Else{
                if ($This.$Property -Notlike $Null) {$RetVal = "$($RetVal)`r`n    $($Property) = $(($This.$Property | ForEach-Object {"'$_'"}) -join ',')"}
            }
        }
        $RetVal = "$($RetVal)`r`n}"
        Return $RetVal
    }
    [System.Management.Automation.PSModuleInfo] Save([String] ${FilePath}) {
        $Path = Split-Path -LiteralPath $FilePath
        if ($FilePath -notlike '*.psd1') {
            Throw 'Filename not allowed, file extension should be .psd1'
        }
        if ($(Test-Path -LiteralPath $Path) -ne $True) {
            Try {
                New-Item -Path $Path -ItemType Directory -Force -ErrorAction 'Stop'
            }Catch {
                Throw "Unable to create path $($Path): $($_.Exception.Message)"
            }
        }
        Try {
            Set-Content -Value $This.ToString() -Path $FilePath -Force -ErrorAction 'Stop'
        }Catch {
            Throw "Unable to create gfle $($FilePath): $($_.Exception.Message)"
        }
        Try {
            $TestManifest = Test-ModuleManifest -Path $FilePath -Verbose:$False -ErrorAction 'Stop'
            Return $TestManifest
        }Catch {
            Throw $_
        }
    }
}
Function New-PoshManifest {
    [CMDLetBinding()]
    Param()
    BEGIN {
        #region Function initialisation DO NOT REMOVE
        [String] ${FunctionName} = $MyInvocation.MyCommand
        [DateTime] ${FunctionEnterTime} = [DateTime]::Now
        Write-Verbose "Entering : $($FunctionName)"
        #endregion Function initialisation DO NOT REMOVE
    }
    PROCESS {
        #region Function Processing DO NOT REMOVE
        Write-Verbose "Processing : $($FunctionName)"
        #region Function Processing DO NOT REMOVE
    }
    END {
        #region Function closing  DO NOT REMOVE
        $TimeSpent = New-TimeSpan -Start $FunctionEnterTime -Verbose:$False -ErrorAction SilentlyContinue
        [String] ${TimeSpentString} = ''
        Switch ($TimeSpent) {
            {$_.TotalDays -gt 1} {
                $TimeSpentString = "$($_.TotalDays) D."
                BREAK
            }
            {$_.TotalHours -gt 1} {
                $TimeSpentString = "$($_.TotalHours) h."
                BREAK
            }
            {$_.TotalMinutes -gt 1} {
                $TimeSpentString = "$($_.TotalMinutes) min."
                BREAK
            }
            {$_.TotalSeconds -gt 1} {
                $TimeSpentString = "$($_.TotalSeconds) s."
                BREAK
            }
            {$_.TotalMilliseconds -gt 1} {
                $TimeSpentString = "$($_.TotalMilliseconds) ms."
                BREAK
            }
            Default {
                $TimeSpentString = "$($_.Ticks) Ticks"
                BREAK
            }
        }
        Write-Verbose "Ending : $($FunctionName) - TimeSpent : $($TimeSpentString)"
        #endregion Function closing  DO NOT REMOVE
    }
}

$Test = [PoshManifest]::New('HelloWorld')
$Test.FunctionsToExport = @("A","B","C")
$Test.ToString()
$TestManifestResult = $Test.Save('C:\Temp\Toto\tutu\tata\turlututu.psd1')
$TestManifestResult